1) Modelo de usuario:
- interfaces > user.ts creamos una interface para el usuario llamada IUser
- models > Users.ts creamos el modelo de usuario, aclaramos que es de tipo IUser
  y especificamos los roles que va a haber

2) Insertar usuarios de prueba:
- database > el archivo products.ts pasa a llamarse seed-data.ts
- en este archivo vamos a crear una interface SeedUser la cual vamos a agregar a
  la interface SeedData 
- en initialData que es donde tenemos todos los productos, vamos a crear un array nuevo
  con datos de 2 usuarios 1 admin y el otro cliente
- instalamos bcrypt para encriptar las contrase単as y lo aplicamos
- api > seed.ts vamos a agregar las lineas de codigo para borrar y agregar los usuarios
  cuando se hace la peticion 
- ahora al hacer la peticion a seed ademas de agregarse productos tambien se agregan
  los usuarios con sus contrase単as encriptadas

3) REST login :
- api > login.ts endpoint con el cual vamos a iniciar sesion
- usamos el snippet nextapi en el type vamos a crear uno nuevo ademas del de message
- creamos un switch para hacer el login y el metodo va a ser post 
- creamos la funcion del loggin, del body de la request vamos a obtener el mail y la password
- hacemos 2 validaciones:\
    - 1 si el usuario no existe tira bad request
    - 2 bcrypt compara la password y si no coincide tira bad request
- del user extraemos el role y el nombre
- retornamos un status 200 el cual va a tener el token (todavia no lo tenemos) y del usuario
  email, role y nombre
- vamos a postman y probamos el endpoint /user/login 
- POST y en el body hay que elegir x-www-form..... como keys hay que mandar mail y password
  y en el body de cada uno un mail y password validos 

4) Crear JWT:
- .env > creamos una variable para el jwt
- utils > jwt.ts vamos a crear una funcion para crear el jwt
- creamos una funcion que va a recibir el id y el mail
- hacemos una validacion pra ver si existe la varialble (semilla)
- la funcion sign de jwt necesita un payload y la semilla, tambien le podemos agregar un opcional
- login.ts abajo de la constante que desestructura el user
- creamos una constante token en la cual llamamos a la funcion creada en jwt y le pasamos 
  el id y el mail del usuario
- esta constante la mandamos dentro de la respuesta 

5) REST Registro de usuario:
- api > register.ts copiamos todo el codigo de login.ts lo pegamos y lo vamos a modificar
- le cambiamos el nombre a la funcion por registerUser
- a la desestructuracion del body de la respuesta le agregamos el nombre y los tipos de datos
- primer validacion: la contrase単a debe ser mayor a 6
- segunda validacion: el nombre debe ser mayor a 2
- aca nos conectamos a la db y creamos una constante que busca si hay un usuario con ese mail
- tercer validacion: el mail no debe existir
- creamos un newUser y con la contrase単a encriptada 
- hacemos un trycatch en donde se va a guardar el newUser
- desestructuramos el id y el role del newUser 

6) Validar correo electronico:
- https://gist.github.com/Klerith/b5b6c223843aeb683b8479d188ea35ae
- funciones para validar el correo hechas por fernando
- utils > validations.ts pegamos todo el codigo
- register.ts creamos un condicional que usa isValidEmail (gist) para que si el correo no es valido 
  arroja un mensaje de error

7) Validar y renovar JWT:
- user > validate-toke.ts
- pegamos todo el codigo del login.ts
- cambiamos el metodo del switch por un GET
- la funcion se va a llamar checkJWT
- el token lo vamos a obtener de las cookies
- utils > jwt.ts vamos a crear una funcion para ver si el token es valido
- se crea una validacion isValidToken para ver si la semilla existe y sino arroja error
- retornamos una promesa que va a tener un trycatch
- en el try se usa la funcion verify (de jwt) que requiere un token, la semilla y un callback en el cual
  recibiriamos un error y si todo sale bien el payload
  - si hay un error hasta ahi se llega
  - sino vamos a poder obteener el id del payload y especificamos que es de tipo string
  - al resolve de la promise le mandamos el id
- en el catch mandamos el reject con un mensaje de error
- validate-toke.ts creamos una variable userId
- un trycatch donde userId va a ser igual a isValidToken y le pasamos el token y el en catchun mensaje de error
- nos conectamos a la db 
- se obtiene el usuario a traves del id
- nos desconectamos de la db
- hacemos una validacion para ver si el usuario existe 
- desestructuramos el id, mail, nombre y role del usuario y lo mandamos a la respuesta
- POSTMAN: vamos a utilizar este endpoint http://localhost:3000/api/user/validate-token
  - una peticion GET 
  - vamos a la parte de cookies 
  - en el domain name escribimos localhost:3000
  - tocamos en add cookie y de nombre le ponemos "token", en el value le ponemos un token valido
    y el resto del codigo lo dejamos como estaba 
  - ahora al darle a send deberiamos ver el token y el usuario al que le pertenece ese token

8) Login Form - React hook Form:
- instalamos React hook Form
- auth > login.tsx creamos un type (FormData) para el form
- llamamos a useForm (propio de React hook Form) el cual le desestructuramos varias funciones y 
  aclaramos que es de tipo FormData
- creamos la funcion onLoginUser que va a recibir la data de tipo FormData
- envolvemos el jsx en un form y en el onSubmit le mandamos una de las funciones que desestructuramos
  del useForm y dentro le mandamos la funcion onLoginUser
- a los inputs tenemos que pasarles una propagacion de una de las funciones del useForm
  y le escribiriamos cual seria el nombre del input
- al boton le agregariamos el type de submit

9) Validaciones en el form:
- login.tsx > en donde habiamos hecho la propagacion antes 
- agregamos la prop required para indicar que ese campo es requerido si o si
- para validarlo agregamos la prop validate y usamos la funcion que copiamos del gist de fernando
- para marcar los errores usamos la prop de MUI a la cual le pasamos como argumento errors que es 
  de React hook forms y en el texto hacemos lo mismo pero con el mensaje de errors, que lo habiamos
  definido en required


-------------------------------------NO ES DEFINITIVO-------------------------------------
10) validacion contra el backend:
- src > api > tesloApi instalamos axios
- creamos una instancia con axios
- login.tsx en la funcion onLoginUser hacemos un trycatch
- hacemos una peticion post a traves de tesloApi a "/user/login" y mandamos el mail y password
- de la data desestructuramos el token y el usuario
- en el catch solo mostramos el error

11) Mostrar mendaje de error en la pantalla:
- por el momento hacemos el mismo procedimiento que hicimos en el login pero 
  adaptandolo al register

-------------------------------------NO ES DEFINITIVO-------------------------------------

12) AuthContext: 
- creamos el provider, reducer y Context para la autenticacion

13) Dispara acciones de Login:
- authReducer: creamos la accion Login que hace que el estado pase a ser true y el
  user va a ser el payload
- AuthProvider: creamos la funcion loginUser que es basicamente lo mismo que creamos en login.tsx 
  en el punto 10 
- AuthContext: especificamos el tipo de la funcion loginUser 
- login.tsx dentro de onLoginUser llamamos esa funcion a traves del context, le pasamos el mail
  y la password. creamos un condicion para que si falla el login muestre los errores
- usamos el router.replace() que hace que el usuario no pueda volver a la pagina donde estaba antes

14) Dispara acciones de Registro:
- mismo procedimiento que en el 13 solo que cambia la parte de los errores
- AuthProvider: creamos la funcion registerUser, el try es identico al del login y en el catch
  creamos 2 condicionales para ver si el error es de axios (fuera de nuestro alcance) o si es
  del registro
- register.tsx: de la funcion registerUser desestructuramos el message y hasError
- si hasError es true se muestra el error

15) Recuperar el estado de autenticacion del usuario: al recargar la pag no se pierda el token y tengamos
    que volver a autenticarnos
- AuthProvider: creamos la funcion checkToken, muy similar a loginUser
- cambia el endpoint al cual llamamos, de ahi trae el usuario y el token, los seteamos en las cookies
- despachamos el login y el payload va a ser el usuario
- si hay error se remueve el token de las cookies
- usamos un useEffect sin dependencia (se ejecuta solo cuando se recarga la pagina) y que ejecute esta funcion

16) Logout y redireccion a la ultima pagina vista:
- AuthProvider creamos la funcion logout, borra el token, el carrito y hace un refresh de la pagina para actualizar el estado
- AuthContext: especificamos el tipo de la funcion logout
- SideMenu.tsx: traemos la logout del context en el boton de salir 
- login.tsx: en la funcion onLoginUser creamos una constante que del router va a obtener el parametro,
  lo pasa a string y si no tiene nada va a ser "/"
- esta constante se la pasamos al router.replace
- en el boton de ingresar usamos onNavigateTo, pasamos la ruta del login pero le agregamos el path que vamos a tener
  guardado en el router
 
17) Mantener el query parameter depues de crear un usuario:
- proceso similar al de arriba, solo que no usamos context y en vez de usar router.asPath
  usamos router.query.p

18)Mostrar poagiona de carrito vacio:
- CartContext: agregamos la propiedad isLoaded de tipo boolean
- CartProvider: hacemos lo mismo y tambien la agregamos en el estado con false como valor inicial
- cartReducer: En la primer accion que carga el carrito de las cookies el isLoaded va a ser true
- pages > cart > index.tsx creamos un useEffect que verifica el isLoaded y el cart.length del context
  y reemplaza la ruta por la del carrito vacio 
- creamos un condicional que retorna un fragmento vacio para que no se vea la pagina del carrito 

19) Verificar autenticacion con server side: Si no estas autenticado la pagina adress te devuelve al login
- utils > jwt.ts dentro de la funcion isValidToken agregamos un condicional para que si el token
  es menor a 10 caracteres rechace la promesa
- pages > checkout > adress.tsx usamos staticProps obtenemos el token, se lo pasamos a la funcion isValidToken
  si es valido retorna un true
- si el token no es valido te redirecciona al login

20) middleware de autenticacion:

21) Datos de la direccion: 
adres.tsx: usamos React hook Form para manejar el formulario de la direccion

22) Recargar direccion de la persona:
ANOTARRRRRR