1) fuimos creando todo el diseÃ±o de la pagina

2) Componente para mostrar productos:
    - interfaces > products.ts aca vamos a crear la interface de los productos que basicamente
      la sacamos del modelo que esta en database > products solo que cambiamos el nombre
      y a validsizes y validtypes les cambiamos el nombre
    - components > products > ProductCard.tsx en este componente vamos a renderizar
      las cards de los productos, recibimos el producto y lo mapeamos
    - components > products > ProductList.tsx este componentes es la lista de los
      productos, mapeamostodos los productos y luego se los pasamos a ProductCard
      que va a recibir el producto individual
    - pages > index importamos ProductList y le pasamos initialData.products que 
      es lo que tiene todos los productos

3) Creamos el componente que va a renderizar cada articulo al hacer click en la
   card
----------------IMPORTANTE--------------------
Como usar una dependencia que no esta hecha para TS y ni si quiera tiene los archivos
de definicion (no lo tuve que hacer pero dejo las explicacion, por si en el
futuro lo tengo que hacer)

4)  - En npm tiene un apartado que noes explica como hacerlo
    - Vamos a tener que crear un archivo en la carpeta raiz
      con el nombre que nos da en la pagina
    - Luego ene se archivo vamos a pegar todas las lineas de codigo que
      tambien nos dan en la pagina, esto le da un aproximado a TS de como
      funciona la dependencia

----------------IMPORTANTE--------------------

Database y Restful:

5) Prepara la db local
  - pasos identicos a los que hicimos en el proyecto de openjira
  - creamos el archivo docker-compose.yaml, creamos las lineas de codigo
  - creamos los archivos .env y .env.template y les pasamos la mongourl
  - al archivo readme le agregamos las indicaciones
  - ejecutamos docker-compose up -d (hay que tener docker abierto)
  - en el gitignore escribimos las carpeta "mongo" que se nos creo y .env 

6) Mongoose y modelo de producto:
  - instalamos mongoose
  - models > Product.ts en este archivo vamos a crear un modelo del producto
    es como una interface pero mucho mas detallada
  
7) llenar la db y conexion a mongo
  - database > db.ts copiamos y pegamos el mismo codigo de openjira
  - api > seed.ts el codigo es similar solo que hay que adaptarlo
  - finalmente al hacer el llamado a /api/seed se llena la db de productos

8) Obtener todos los productos:
  - api > products.ts > index.ts 
  - creamos un resful api para que cuando hagamos una peticion
  get nos traiga todos los productos

9) Aplicar filtros a la consulta:
  - a este mismo restful api le agregamos la funcion para que segun lo que se escriba
    en la query, nos devuelva dstintos resultados
  - lo que hacemos es definir que la req.query va a ser siempre = a que traiga todos
    los productos 
  - luego creamos un condicional en el que si la query es diferente de "all" 
    traiga lo que se escribio en la query y eso se busque en la lista de productos

10) Obtener producto por slug:
  - creamos otro restful api pero que solo va a traer los productos segun su slug
  - api > product > [slug].ts 
  - la respuesta ademas de ser string por el mensaje, va a ser de tipo IProduct
    pero solo, no le ponemos [] pq es un producto solo
  - va a ser un metodo GET 
  - lo que va avenir en la query es el slug (const {slug} = req.query)
  - esto se lo pasamos a una constante product que va a buscarlo en la db
  - para pasar esta constante como respuesta 

11) Busqueda de productos:
-  