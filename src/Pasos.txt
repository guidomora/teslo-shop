1) fuimos creando todo el diseÃ±o de la pagina

2) Componente para mostrar productos:
    - interfaces > products.ts aca vamos a crear la interface de los productos que basicamente
      la sacamos del modelo que esta en database > products solo que cambiamos el nombre
      y a validsizes y validtypes les cambiamos el nombre
    - components > products > ProductCard.tsx en este componente vamos a renderizar
      las cards de los productos, recibimos el producto y lo mapeamos
    - components > products > ProductList.tsx este componentes es la lista de los
      productos, mapeamostodos los productos y luego se los pasamos a ProductCard
      que va a recibir el producto individual
    - pages > index importamos ProductList y le pasamos initialData.products que 
      es lo que tiene todos los productos

3) Creamos el componente que va a renderizar cada articulo al hacer click en la
   card
----------------IMPORTANTE--------------------
Como usar una dependencia que no esta hecha para TS y ni si quiera tiene los archivos
de definicion (no lo tuve que hacer pero dejo las explicacion, por si en el
futuro lo tengo que hacer)

4)  - En npm tiene un apartado que noes explica como hacerlo
    - Vamos a tener que crear un archivo en la carpeta raiz
      con el nombre que nos da en la pagina
    - Luego ene se archivo vamos a pegar todas las lineas de codigo que
      tambien nos dan en la pagina, esto le da un aproximado a TS de como
      funciona la dependencia

----------------IMPORTANTE--------------------

Database y Restful:

5) Prepara la db local
  - pasos identicos a los que hicimos en el proyecto de openjira
  - creamos el archivo docker-compose.yaml, creamos las lineas de codigo
  - creamos los archivos .env y .env.template y les pasamos la mongourl
  - al archivo readme le agregamos las indicaciones
  - ejecutamos docker-compose up -d (hay que tener docker abierto)
  - en el gitignore escribimos las carpeta "mongo" que se nos creo y .env 

6) Mongoose y modelo de producto:
  - instalamos mongoose
  - models > Product.ts en este archivo vamos a crear un modelo del producto
    es como una interface pero mucho mas detallada
  
7) llenar la db y conexion a mongo
  - database > db.ts copiamos y pegamos el mismo codigo de openjira
  - api > seed.ts el codigo es similar solo que hay que adaptarlo
  - finalmente al hacer el llamado a /api/seed se llena la db de productos

8) Obtener todos los productos:
  - api > products.ts > index.ts 
  - creamos un resful api para que cuando hagamos una peticion
  get nos traiga todos los productos

9) Aplicar filtros a la consulta:
  - a este mismo restful api le agregamos la funcion para que segun lo que se escriba
    en la query, nos devuelva dstintos resultados
  - lo que hacemos es definir que la req.query va a ser siempre = a que traiga todos
    los productos 
  - luego creamos un condicional en el que si la query es diferente de "all" 
    traiga lo que se escribio en la query y eso se busque en la lista de productos

10) Obtener producto por slug:
  - creamos otro restful api pero que solo va a traer los productos segun su slug
  - api > product > [slug].ts 
  - la respuesta ademas de ser string por el mensaje, va a ser de tipo IProduct
    pero solo, no le ponemos [] pq es un producto solo
  - va a ser un metodo GET 
  - lo que va a venir en la query es el slug (const {slug} = req.query)
  - esto se lo pasamos a una constante product que va a buscarlo en la db
  - para pasar esta constante como respuesta 

11) Busqueda de productos:
  - api > search > [q].ts
  - otro restful api que se va a encargar de la busqueda en la pagina
    a palabra que ingresemos va a traer los roductos que tengan esa palabra
  - mismo procedimiento que siempre
  - en la funcion que se ejecuta en el switch (searchProducts()) vamos a:
    - hacer un condicional por si la query viene vacia
    - despues pasamos la query a string y a minuscula
    - en models > Product vamos a crear un indice que va a conectar 2 campos
    - esto se lo pasamos a una constante product que va a buscarlo e indexarlo
  - tambien en la carpeta search creamos el archivo > index.ts , este va a ser otro
    api restful que solo se va a encargar de mostrar un mensaje de error en el caso 
    de que la query este vacia

------------------------------------------------------------------
React hooks for data fetching:

SWR: stale-while-revalidate

Sirve para hacer peticiones, solo si la informacion cambia.

status 304: indica que no hay necesidad de retransmitir la info resultante
y nos ahorramos de volver a realizar la peticion

SWR internamente tiene un useEffect

12) Configuracion global SWR:
  - vamos a crear un custom hook para usar el SWR
  - hooks > useProducts.ts
  - en _app.js vamos a poner el provider de SWR y le tenemos que pasar la prop value
    que va a contener un fetcher
  - importamos useSwr
  - creamos una funcion que va a tener todo el codigo del hook
  - este va a recibir la url y la configuracion 
  - vamos al index de nuestra app, llamamos a useProducts('/products') que es de donde vamos a
    traer la data y vamos a obtener las props products e isLoading
  - hacemos un ternario para que si isLoading es true nos arroje un "Cargando..."
    y sino <ProductList products={products(los que trajimos del useProducts)}/> se muestra

13) Mostrar pantalla de carga:
  - components > ui > FullScreenLoading
  - creamos un componenteque se va a mostrar mientras se cargan los productos de la tienda
  - lo reemplazamos en el ternario que habiamos creado antes, reemplazando el cargando 

14) Mostrar textos cuando la imagen esta cargada:
  - en ProductCard.tsx creamos un useState nuevo que va a estar en false
  - en el componente CardMedia le agregamos la prop onLoad que va a ser 
    una funcion que ejecuta el seter del state y cambia el estado a true
  - Luego en el Box que contiene los textos, le agregamos un ternario para que si
    el estado es true el display sea "block" y sino "none"
  
15) Pantalla de productos de hombres mujeres y ninos:
  - pages > category > kid | women | men .tsx estas paginas van a mostrar los
    productos segun su categoria
  - copiamos el index de nuestra app tal cual esta y lo pegamos en estos componentes
  - solo hay que cambiarle el nombre y en el custom hook de useProducts cambiar la query 
    por la de "/products?gender=men" y cambiarlo en cada pagina segun la categoria

16) mostrar menu en la pagina activa:
  - ui > NavBar
  - vamos a usar el custom hook useRouter()
  - desestructuramos asPath para obtener la ruta 
  - en los botones en la prop color hacemos un ternario para que si
    la ruta es igual a la ruta del boton sea el color primary sino 
    queda con el color comun 

17) UI context:
  - Context > ui > UiContext | UiProvider |UiReducer
  - Creamos todo el codigo 
  - envolvemos la app en el UiProvider y pasamos isMenuOpen como false

18) Mostrar y navegar:
  - le damos funcionalidad al SideMenu usando el context
  - en NavBar llamamos al context y traemos la funcion toggleMenu, que cambia el estado
    y la ponemos en el boton del menu para que lo abra
  - en SideMenu llamamos al context y traemos la funcion toggleMenu y isMenuOpen
  - creamos una funcion navigateTo que va a tener el toggleMenu, va a recibir la url
    y hacemos un router.push para mandarla
  - en los botones del SideMenu en el onClick le agregamos esta funcion y le mandamos
    el enlace a donde tiene que ir segun la categoria

19) pantalla de un producto: al hacer click en cualquier producto del inicio, vamos a poder entrar en su detalle
  - vamos a ProductCard y cambiamos la url del producto por una dinamica (back ticks y product.slug)
  - vamos a pages > product y al archivo slug.ts lo pasamo a nombrar a [slug].ts

    ----------------------------------------------------------------------------
    NO SE USA ESTO, SOLO A MODO DE PRACTICA
    20) getServerSideProps: genercion del lado del servidor
    - database > dabProducts.ts creamos getProductBySlug este hook trae los productos segun su slug
    - recibe el slug, nos conectamos a la db, lo busca, nos desconectamos, si no le entruentra
      retorna null y finalmente lo serializamos como string
    
    - volvemos   [slug].ts
    - creamos la interface Props que va a tener product : IProduct
    - creamos la funcion getServerSideProps, desdestructuramos el ctx para obtener los params
    - de los params desestructuramos el slug 
    - llamamos a getProductBySlug y le pasamos el slug obtenido de los params
    - si no se encuentra un producto lo mandamos a "/"
    - mandamos el producto como props 
    NO SE USA ESTO, SOLO A MODO DE PRACTICA
    ----------------------------------------------------------------------------

    21) getStaticPaths y getStaticProps
    - dbProducts > creamos una funcion getAllProductsSlugs que va a regresar una promesa
      de los product slug como un array
    - creamos una interface donde indicamos que slug es string

      getStaticPaths:
    - vamos a [slug].ts usamos el snippet nextgetstaticpaths
    - dentro creamos una constante que va a llamar a getAllProductsSlugs para obtenerlos
    - en paths mapeamos el slug obtenido y lo pasamos como params
      getStaticProps
    - usamos el snippet nextstaticprops
    - desestructuramos params del ctx 
    - creamos una constante donde cambiamos el nombre params por slug y si viene vacio
      va a ser un string vacio
    - luego otra constante product al que le pasamos ese slug y lo trae con el getProductBySlug
    - creamos un condicional donde si no se encuentra un producto lo mandamos a "/"
    - en el return de getStaticProps como props pasamos product y agregamos un revalidate cada 24hs

22) Pagina de busqueda
- pages > search > [query].tsx 
- vamos a SideMenu.tsx creamos un state para la busqueda que va a ser igual a ""
- creamos la funcion onSearchTerm tiene una validacion y usa la funcion de navigateTo
  pero le pasamos la ruta que seria para search y le incrustamos el searchTerm
- al Input le agregamos el onChange y onKeyDown al cual le vamos a decir que si 
  presiona enter realiza la busqueda


  La pagina de busqueda la vamos a tener que renderizar del lado del servidor porque
  ya deberiamos tener el termino de busqueda armado bajo las request y yo no se que es 
  lo que va a buscar la persona, asi que no puede estar de forma estatica
 

23)Realizar la busqueda mediante SSR  
- database > dbProducts creamos la funcion getProductsByTerm que va a ser igual a searchProducts
  de api > search > [q]
- vamos a [query].tsx 
- usamos el snippet de SSR 
- desestructuramos params 
- creamos una constante que va a obtener la query de los params
- hacemos una validacion 
- creamos un let products que hace el await de getProductsByTerm y le pasamos la query
- pasamos products como prop y vamos a tener que crear una interface Props

24) Mejorar la experiencia de usuario en la busqueda: en caso de no encontrar productos en la busqueda
    vamos a devolver todos los productos
- database > dbProducts creamos la funcion creamos una funcion getAllProducts (va a ser temporaria)
  que nos va a traer todos los productos
- seguimos en [query].tsx 
- en la funcion de SSR vamos a agregar una constante foundProducts que va a ser un booleano dependiendo
  de si se encontro productos 
- creamos un condicional si foundProducts es true products va a ser igual a getAllProducts
- agregamos a las props foundProducts y la query 
- a la interface le agregamos foundProducts: boolean y query:string
- las pasamos como parametros a la pagina y en el jsx agregamos un ternario para mostrar la query
  y si no se encuentra lo que busca el cliente


25) Cart Context e interfaces:
- interfaces > cart.ts creamos una interface ICartPoduct, es identica a la de products solo que con 
  menos datos y sin []
- Context > CartContext.tsx | CartProvider.tsx | cartReducer.ts
- envolvemos  _app en el CartProvider

26) validar que seleccione talla:
- vamos a pages > product > [slug].tsx 
- creamos un state que va a ser de tipo ICartPoduct y como estado inicial va a tener todas
  las mismas propiedades pero con algunas modificaciones
- En el boton de agregar al carrito creamos un ternario para que si no selecciono ninguna talla
  lo pida y sino nos muestra "Agregar al carrito"
- components > products > SizeSelector.tsx
- a la interface le agregamos la funcion onSelectedSize, en el componente la desestructuramos
- en el onClick llamamos a la funcion y le pasamos el size
- [slug].tsx  creamos una funcion selectedSize, la cual va a setear el talle del producto
- en el componente SizeSelector llamamos a onSelectedSize y le pasamos selectedSize

27) Contador de productos:
- components > ui > ItemCounter
- creamos una interface 
- el ItemCounter va a recibir maxValue, currentValue, updateQuantity(una funcion)
- creamos una funcion que recibe un valor y se va a encargar de sumar y restar y evaluar segun el stock hasta
  cuantos productos puede comprar
- asignamos esa funcion a los botones y le ponemos +1 a la de sumar y -1 a la de restar
- pages > product > [slug].tsx 
- creamos la funcion onUpdateQuantity que se va a encargar de modificar la cantidad en el estado
- ahora al ItemCounter le tenemos que agregar las props de la interface

28) Agregar al carrito:
- cartReducer creamos el case "Update products in cart"
- CartContext a la interface le agregamos el tipo de la funcion addProductToCart, la cual vamos a crear
  en el provider
- CartProvider creamos la funcion addProductToCart esta va a recibir un producto que va a ser de tipo ICartPoduct
  - creamos una validacion booleana para ver si el id del producto nuevo es igual a algun producto del carrito
  - si la validacion es false se agrega el producto al carrito 
  - otra validacion booleana para ver si el id y el size del producto nuevo son iguales a los de algun producto
    en el carrito
  - si es false se agrega el producto al carrito
  - mapeamos el carrito y si el id y el size del producto nuevo son iguales a los de alguno en el carrito, 
    la cantidad se suma
  - esto lo pasamos como payload
- [slug].tsx traemos addProductToCart del CartContext y lo mandamos a al boton de agregar al carrito y le pasamos
  el tempCartProduct

29) Almacenar el carrito en las cookies:
- CartProvider creamos un state con estado inicial en false
- creamos el primer useEffect este va a tener un try catch
- en el try si el estado es falso averiguamos si hay un carrito en las cookies y sino se crea un array vacio
  y despachamos la accion que carga el carrito desde las cookies 
- en el catch despachamos la misma accion pero el payload va a ser un array vacio
- creamos el segundo useEffect que va a setear los productos en las cookies cada vez que se detecte 
  algun cambio en el carrito y haya alguna modificacion en el estado creado 

30) Mostrar productos en el carrito:
- CartList.tsx solo tenemos que traer el CartContext
- reemplazamos el mapeo que estaba hecho previamente

31) Actualizar cantidad desde el carrito:
- cartReducer creamos una accion donde el payload va a ser de tipo ICartProduct
- mapeamos el cart y nos fijamos que el id y el size sean diferentes, al no ser diferentes retorna el 
  action.payload
- CartProvider creamos una funcion que va a despachar la accion creada en el reducer y como payload recibe 
  el producto que es de tipo ICartProduct
- CartContext especificamos el tipo de la funcion creada en el provider
- CartList creamos una funcion que va a recibir el producto:ICartPoduct y un valor:number
- esta funcion iguala la cantidad del producto a la del nuevo valor y se lo pasamos a la funcion creada en
  el provider
- esta funcion la vamos a pasar al updateQuantity del ItemCounter y le tenemos que pasar el producto y el valor

32) Eliminar un producto del carrito:
- cartReducer creamos una accion donde el payload va a ser de tipo ICartProduct
- hacemos un filter del cart y nos fijamos que si el id y el size son iguales nos de false
  caso contrario true
- CartProvider creamos una funcion que va a despachar la accion creada en el reducer y como payload recibe 
  el producto que es de tipo ICartProduct
- CartContext especificamos el tipo de la funcion creada en el provider
- CartList importamos la funcion del context y la mandamos al onclick delk boton remove y le pasamos el producto